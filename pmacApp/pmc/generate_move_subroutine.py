def common_header():
  return [
      '; Autogenerated by generate_trajectory_scan.py.  DO NOT EDIT this file',
      '; This file is #included in trajectory_scan.pmc and will be downloaded automatically',
    ]


def pmc_contents():
  return '\n'.join(common_header() + [
      '; It cannot be downloaded on its own, as it doesn\'t have the ProgramNum definition',
      '',
      '#include "./move_axes_programs.pmc"',
      '',
      'Open Program ProgramNum',
      '',
      'N108',
      '    P4500 = P4500 + 1',
      '    Q71 = Current_A',
      '    Q91 = A_Vel',
      '    Q72 = Current_B',
      '    Q92 = B_Vel',
      '    Q73 = Current_C',
      '    Q93 = C_Vel',
      '    Q74 = Current_U',
      '    Q94 = U_Vel',
      '    Q75 = Current_V',
      '    Q95 = V_Vel',
      '    Q76 = Current_W',
      '    Q96 = W_Vel',
      '    Q77 = Current_X',
      '    Q97 = X_Vel',
      '    Q78 = Current_Y',
      '    Q98 = Y_Vel',
      '    Q79 = Current_Z',
      '    Q99 = Z_Vel',
      '    Call ('+str(offset())+' + Axes)',
      '    TotalPoints = TotalPoints + 1',
      'Return',
      '',
      'Close',
    ])+'\n'


def offset():
  return 200


def move_programs(l=1, h=512):
  # Base cases.
  if l + 1 == h: return (
      'Open Program '+str(offset()+l)+'\n'
      +'Clear\n'
      +'    '+' '.join(sorted(map(str, {k: v for k, v in {
          1  : 'A(Q71):(Q91)',
          2  : 'B(Q72):(Q92)',
          4  : 'C(Q73):(Q93)',
          8  : 'U(Q74):(Q94)',
          16 : 'V(Q75):(Q95)',
          32 : 'W(Q76):(Q96)',
          64 : 'X(Q77):(Q97)',
          128: 'Y(Q78):(Q98)',
          256: 'Z(Q79):(Q99)',
        }.items() if h-1 & k}.values())))+'\n'
      +'Close'
    )

  # Other cases.
  return (
      '\n'.join(move_programs(l, l+1).split('\n'))+'\n'
      +'\n'.join(move_programs(l+1, h).split('\n'))
    )


if __name__ == '__main__':
  with open('./subroutine_move_axes.pmc', 'w+') as f: f.write(pmc_contents())
  with open('./move_axes_programs.pmc', 'w+') as f:
    f.write('\n'.join(common_header() + [move_programs()]))
